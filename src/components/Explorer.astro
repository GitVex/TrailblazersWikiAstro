---
import './styles/Explorer.scss'
import '../styles/global.css'
import { getCollection } from "astro:content";
import { filePathToSlug, getSlugMap } from "../../plugins/util/remarkOfWikiLinks-utils";
import ExplorerItem from "ExplorerItem.astro";

const slugMap = getSlugMap();

interface TreeObject {
    [key: string]: TreeObject | any[];
}

async function buildTree() {
    const files = await getCollection("content");
    const tree: TreeObject = {};

    files.forEach(file => {
        const fpath = file.filePath;
        if (!fpath) return;
        const slug = filePathToSlug(fpath);
        const route = slugMap[slug].route;

        const parts = route.split("/");
        let current = tree;

        for (let i = 0; i < parts.length; i++) {
            const isFile = i === parts.length - 1;
            const part = parts[i];

            if (!current[part]) {
                current[part] = isFile ? [] : {};
            }
            current = current[part];
        }
    });

    return tree;
}

const tree = await buildTree();
---

<div class="explorer">
    <nav>
        <ul class="overflow-scroll">
            {Object.entries(tree).map(([key, value]) => {
                if (Array.isArray(value)) {
                    return (
                            <li class="file-label">
                                <a href={slugMap[key].route}>{slugMap[key].name}</a>
                            </li>
                    );
                } else {
                    return (
                            <ExplorerItem
                                    name={key}
                                    children={value}
                                    path=""
                                    slugMap={slugMap}
                            />
                    );
                }
            })}
        </ul>
    </nav>
</div>

<style lang="scss">
  .file-label {
    padding-left: 1.5rem;

    a {
      text-decoration: none;
      color: inherit;

      &:hover {
        color: #ffb022;
      }
    }
  }
</style>
